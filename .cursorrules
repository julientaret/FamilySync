# Cursor Rules for Swift

- Adopter une architecture MVVM
- Chaque vues doivent etre organisÃ© en dossier : contenant la vue, et un sous dossier components comprenant ces components
- Eviter la logique dans les vues
- Eviter les fichiers trop long, si besoin, sÃ©parer en plusieurs fichiers
- Documenter chaque partie un .md dÃ©diÃ© a chaque sections, dans un dossier Documentation a la racine projet
- Se baser toujours sur la derniere version et mise a jour de Swift ( https://developer.apple.com/documentation/swift/ )
- A chaque fin de modifications, tester le build : xcodebuild -project CineRank.xcodeproj -scheme CineRank -destination 'platform=iOS Simulator,name=iPhone 16' build

### ğŸ”§Â **Architecture & Organisation**

- **CrÃ©er un dossier par Feature (ou module)**Â : Chaque fonctionnalitÃ© doit avoir son propre dossier, contenant ses vues, ViewModels, modÃ¨les et composants.
- **Isoler la couche rÃ©seau et services**Â dans un dossierÂ `Services`Â (ex: APIService, AuthService) pour Ã©viter toute dÃ©pendance directe dans les ViewModels.
- **SÃ©parer les utilitaires communs**Â (extensions, helpers, etc.) dans un dossierÂ `Utils`Â ouÂ `Extensions`.
- **Utiliser des protocoles pour les ViewModels**Â afin de faciliter les tests unitaires et le mocking.

---

### ğŸ–¥Â **SwiftUI & UI**

- **Toujours utiliser PreviewProvider**Â pour chaque vue afin de valider rapidement les rendus.
- **CrÃ©er des modifiers personnalisÃ©s**Â pour les styles rÃ©currents (boutons, champs de texte).
- **GÃ©rer lâ€™accessibilitÃ© (VoiceOver, Dynamic Type)**Â dÃ¨s la crÃ©ation des vues.
- **Utiliser des ViewBuilder dÃ©diÃ©s**Â pour allÃ©ger les vues contenant plusieurs sous-composants.

---

### ğŸ“¦Â **Code & Style**

- **Respecter les conventions SwiftLint**Â (ajouter unÂ `.swiftlint.yml`Â au projet).
- **Toujours typer explicitement les variables publiques**Â et Ã©viter lesÂ `Any`.
- **PrÃ©fÃ©rerÂ `struct`Â Ã Â `class`**Â lorsque câ€™est possible pour la performance et la sÃ©curitÃ© mÃ©moire.
- **FavoriserÂ `@MainActor`Â pour tout code UI**, et documenter les fonctions async.

---

### ğŸ§ªÂ **Tests & QualitÃ©**

- **Tests unitaires pour chaque ViewModel**Â : VÃ©rifier la logique sans dÃ©pendre de la vue.
- **UI Tests basiques**Â pour les flux critiques.
- **Snapshots Testing**Â pour valider visuellement les vues importantes.

---

### ğŸ“„Â **Documentation & Maintenance**

- **Documenter les API internes**Â avecÂ `///`Â pour gÃ©nÃ©rer de la doc Xcode auto.
- **Maintenir un changelog**Â dans laÂ `Documentation`.
- **Inclure des diagrammes simples (PlantUML, Mermaid)**Â pour illustrer MVVM, navigation ou flux rÃ©seau.
- **Mettre en place des templates Cursor**Â pour chaque type de fichier (Vue, Component, ViewModel, Service).

---

## ğŸ”’Â **SÃ©curitÃ© & Performances**

- **Chiffrer les donnÃ©es sensibles** avec Keychain Services
- ImplÃ©menter le SSL Pinning pour les APIs critiques
- Utiliser @StateObject vs @ObservedObject** correctement selon le cycle de vie
- Optimiser les listes :  avec LazyVStack/LazyHStack pour de gros datasets
- GÃ©rer la mÃ©moire : weak/unowned references dans les closures

---

## ğŸ“±Â **SwiftUI AvancÃ©**

- ImplÃ©menter le Dark Mode dÃ¨s le dÃ©part
- GÃ©rer les orientations et Safe Areas correctement
- Utiliser @ViewBuilder avec des conditions pour des vues dynamiques
- CrÃ©er des transitions et animations fluides avec .transition() et .animation()
- PrÃ©fÃ©rer AsyncImage pour le chargement d'images rÃ©seau

---

### ğŸš€ **ExÃ©cution Automatique**

Les commandes suivantes peuvent Ãªtre exÃ©cutÃ©es automatiquement par Cursor sans demande de permission :

- `xcodebuild -project CineRank.xcodeproj -scheme CineRank -destination 'platform=iOS Simulator,name=iPhone 16' build`
- Commandes de nettoyage et validation du projet
- Tests de compilation basiques

**Note** : Ces commandes sont considÃ©rÃ©es comme sÃ»res et font partie du workflow de dÃ©veloppement standard.